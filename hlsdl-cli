#!/bin/sh

# hlsdl-cli
# HLS downloader
# A super-easy tool to download HLS playlist files with muti-threaded downloads

# --- Dependencies --- #
# * sh POSIX
# * sed (all variants)
# * grep
# * curl
# * ffmpeg
# * aria2
# * openssl
# ############# #

GLOB_VERSION="v1.0.1"

GLOB_PARENT_PID="${$}"
GLOB_TMP_DIR=~/.ffmhls
GLOB_USER_AGENT="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0"
GLOB_DEFAULT_IFS="${IFS}"
BOOL_QUIET=""
GLOB_SAVE_TERM="$(stty -g)"

# Receive Terminal Signal
trap 'save_terminal ; cleanup_trap ; printf "%b" "\n" ; exit 2' INT HUP

# Color Processors
err(){ [ -z "${1}" ] || printf "\033[38;5;1m%b\007\033[0m\n" "${1}" >&2 ; return 1 ;}
die(){ err "${2}" ; save_terminal ; cleanup_trap ; exit "${1}" ;}
inf(){ printf "\033[38;5;3m%b\033[0m\n" "${1}" ;}
suc(){ printf "\033[38;5;2m%b\033[0m\n" "${1}" ;}

# Terminal States and Traps
cleanup_trap(){
    for TEMP_TEMPS in "${GLOB_FFMP_TEMP}" "${GLOB_FFMP_TS}" "${GLOB_FFMP_PURL}"; do
        { [ -e "${TEMP_TEMPS}" ] || [ -d "${TEMP_TEMPS}" ] ;} && rm -rdf "${TEMP_TEMPS}"
    done
}

save_terminal(){
    printf "\033[?25h"      # Show Cursor
    printf "\033[0m"        # Normal State of Colors / Remove Text colors
    stty "${GLOB_SAVE_TERM}"        # Rollback stty settings
    IFS="${GLOB_DEFAULT_IFS}"       # Set to default IFS
}

sanitize_terminal(){
    printf "\033[%sA" "${1}"
    [ -n "${4}" ] && printf "\033[%sB" "${4}"
    printf "%${2}s" | sed "s_[[:space:]]_\n$(printf "\033[2K\r")_g"
    [ -n "${3}" ] && printf "\033[%sA" "${3}"
}

dep_check(){
    for TEMP_DEPPACK; do
        command -v "${TEMP_DEPPACK}" >/dev/null || { err "Program \"${TEMP_DEPPACK}\" is not installed." ; BOOL_IS_ERR="1" ;}
    done
    [ "${BOOL_IS_ERR}" = "1" ] && die 1
}

# Main Function
# Needed Args:
# ffmpegdler "{url}" "{out_file}" "{quality}" "{nconnection}"
ffmpegdler(){
    TEMP_QUAL="${3}"
    TEMP_TS_DATA_FIR="$(curl -sLfk "${1}")" || return 1
    TEMP_QUALLIST_VID_IND="$(printf '%s' "${TEMP_TS_DATA_FIR}" | sed -nE '/#EXT-X-STREAM/!d;s_.*[0-9]+x([0-9]+).*_\1_p' | sort -nr)"
    
    # Getting Specific quality
    [ "${TEMP_QUAL}" = "high" ] && TEMP_SELC_PIX="$(printf '%s' "${TEMP_QUALLIST_VID_IND}" | head -n 1)"
    [ "${TEMP_QUAL}" = "low" ] && TEMP_SELC_PIX="$(printf '%s' "${TEMP_QUALLIST_VID_IND}" | tail -n 1)"
    [ -z "${TEMP_SELC_PIX}" ] && [ -n "${TEMP_QUAL}" ] && TEMP_SELC_PIX="$(printf '%s' "${TEMP_QUALLIST_VID_IND}" | grep -m 1 -i "${TEMP_QUAL}")"
    # If quality is not specified
    if [ -z "${TEMP_SELC_PIX}" ]; then
        until [ -n "${TEMP_QUAL}" ]; do
            printf '%s\n' "Pick Here by number:"
            printf '%s\n' "${TEMP_QUALLIST_VID_IND}" | nl -w4 -s") " 
            printf '%s' ">> "
            read -r TEMP_QUAL
            { [ "${TEMP_QUAL}" = "q" ] || [ "${TEMP_QUAL}" -le 0 ] ;} && die 0
        done
        TEMP_SELC_PIX="$(printf '%s' "${TEMP_QUALLIST_VID_IND}" | sed -n "${TEMP_QUAL}"p)"
        [ -z "${TEMP_SELC_PIX}" ] && die 1 "Theres no quality picked, or the quality is not available"
    fi
    TEMP_SELC_QUAL="$(printf '%s' "${TEMP_TS_DATA_FIR}" | sed -nE "/x${TEMP_SELC_PIX}/{n;p;q}")"
    
    # Get Relative Path, when it is not fully sourced into stream url
    if printf '%s' "${TEMP_SELC_QUAL}" | grep -q 'http'; then
        BOOL_STREAM_HTTP=1
    else
        TEMP_RELPATH="${1%/*}/"
    fi
    TEMP_AUD_PERF="$(printf '%s' "${TEMP_TS_DATA_FIR}" | sed -nE 's_^#EXT-X-MEDIA:TYPE=AUDIO.*audio-0.*URI="([^\"]*)".*_\1_p')"
    
    # 2nd step get the 2nd layer which is the TS files
    TEMP_TS_DATA_SEC="$(curl -sLfk "${TEMP_RELPATH}${TEMP_SELC_QUAL}")" || return 1
    TEMP_ENC_KEY="$(printf "%s" "${TEMP_TS_DATA_SEC}" | sed -nE 's_^#EXT-X-KEY.*URI="([^\"]*)"_\1_p')"
    if [ -n "${TEMP_ENC_KEY}" ]; then
        TEMP_DEC_KEY="$(curl -sLk "${TEMP_ENC_KEY}" | od -A n -t x1 | tr -d ' |\n')"
        TEMP_ENC_IV="$(printf "%s" "${TEMP_TS_DATA_SEC}" | sed -nE 's_^#EXT-X-IV.*URI="([^\"]*)"_\1_p')"
        [ -z "${TEMP_ENC_IV}" ] && TEMP_DEC_IV="$(openssl rand -hex 16)" || TEMP_DEC_IV="$(curl -sLk "${TEMP_ENC_IV}" | od -A n -t x1 | tr -d ' |\n')"
    fi
    TEMP_PIECES_DATA="$(printf "%s" "${TEMP_TS_DATA_SEC}" | sed '/^#/d')"
    if printf '%s' "${TEMP_PIECES_DATA}" | grep -q 'http'; then
        unset TEMP_RELPATH
    else
        if [ "${BOOL_STREAM_HTTP}" == 1 ]; then
            TEMP_RELPATH="${TEMP_SELC_QUAL%/*}/"
        else
            TEMP_RELPATH="${1%/*}/"
        fi
    fi
    TEMP_TOTAL_PIECES="$(printf '%s\n' "${TEMP_PIECES_DATA}" | awk 'BEGIN{c=0} //{c++} END{print c}')"
    printf '%s' "${TEMP_PIECES_DATA}" | awk -v "r=${TEMP_RELPATH}" '{printf("%s%s\n  %s%04d%s\n", r, $1, "out=", NR, ".ts")}' > "${GLOB_FFMP_PURL}"
    custom_aria -x "${4}" -s "$((${4} + 3))" -j "${4}" -i "${GLOB_FFMP_PURL}" -d "${GLOB_FFMP_TEMP}" --console-log-level="error" --check-certificate="false" --download-result="hide" --summary-interval="0"
    if [ -n "${TEMP_ENC_KEY}" ]; then
        for TEMP_I in "${GLOB_FFMP_TEMP}"/*; do
            : "$((TEMP_IN+=1))"
            [ "${BOOL_QUIET}" = "1" ] || progbar "${TEMP_IN}" "${TEMP_TOTAL_PIECES}" "Decrypting..."
            openssl aes-128-cbc -d -K "${TEMP_DEC_KEY}" -iv "${TEMP_DEC_IV}" -nopad < "${TEMP_I}" >> "${GLOB_FFMP_TS}"
        done
    else
        [ "${BOOL_QUIET}" = "1" ] || inf "Appending..."
        cat "${GLOB_FFMP_TEMP}"/* >> "${GLOB_FFMP_TS}"
    fi
    # Check if audio was seperated to ts streams to merge it
    [ "${BOOL_QUIET}" = "1" ] || inf "Encoding..."
    if [ -n "${TEMP_AUD_PERF}" ]; then
        ffmpeg -hide_banner -loglevel error -i "${TEMP_AUD_PERF}" -i "${GLOB_FFMP_TS}" -c copy "${2}"
    else
        ffmpeg -hide_banner -loglevel error -i "${GLOB_FFMP_TS}" -c copy "${2}"
    fi
    cleanup_trap
    # Unset all variables for reusing function
    unset TEMP_TS_DATA_FIR TEMP_QUALLIST_VID_IND TEMP_SELC_PIX TEMP_SELC_QUAL TEMP_RELPATH TEMP_TS_DATA_SEC TEMP_ENC_KEY TEMP_DEC_KEY TEMP_ENC_IV TEMP_DEC_IV TEMP_PIECES_DATA TEMP_TOTAL_PIECES
    return 0
}

custom_aria(){
    [ -z "${GLOB_HEADER}" ] || set -- "${@}" ${GLOB_HEADER}
    [ -z "${GLOB_USER_AGENT}" ] || set -- "${@}" --user-agent="${GLOB_USER_AGENT}"
    [ -z "${GLOB_CUST_REFERER}" ] || set -- "${@}" --referer="${GLOB_CUST_REFERER}"
    [ "${BOOL_QUIET}" = "1" ] && set -- "${@}" --quiet true
    aria2c "${@}"
    printf '\n'
}

progbar(){
    TEMP_PROG="$(( ${1} * 100 / ${2} * 100 / 100 ))"
    TEMP_DONE="$(( (TEMP_PROG * 4) / 10 ))" TEMP_LEFT="$(( 40 - TEMP_DONE ))"
    TEMP_FILL="$(printf "\033[7m\033[38;5;$(( (TEMP_DONE % 103 / 20) + 101 ))m%${TEMP_DONE}s\033[0m")" TEMP_EMPTY="$(printf "%${TEMP_LEFT}s")"
    printf '\033[2K\r%s — %s : %s' "¦${TEMP_FILL}${TEMP_EMPTY}¦" "${TEMP_PROG}%" "${3}"
    unset TEMP_PROG TEMP_DONE TEMP_LEFT TEMP_FILL TEMP_EMPTY
}

show_help(){
    printf '%b\n' "A super-easy tool to download HLS files with muti-threaded downloads
                
 Usage:
   ${0##*/} [-z] [-u <user-agent>] [-r <referer>] [-c <connections>] [-q <quality>] [-o <filename>] [URL]
   ${0##*/} -v | -h
                
 Options:
   -v                            : Print Version and Exit
   -h                            : Print Help
   -z                            : Supress output (only shows errors)
   -q [high|low|[n]]             : Choose specific Quality
   -u, --user-agent=[useragent]  : Set an User-Agent Header
   -r, --referer=[referer]       : Set an HTTP Referer Header
   -o [filename]                 : Output filename
   -d [dir]                      : Cache to specific directory (default: ~/.ffmhls)
   -c [N]                        : Set number of connection will be used for downloading
   --header=[headers]            : Set a custom HTTP Headers for request (can be used repeatedly)
        
More info: <https://github.com/Rendevior/hlsdl-cli/>."
}

arg_parser(){
    while getopts ":vhzq:d:u:r:o:c:-:" TEMP_OPT; do
        case "${TEMP_OPT}" in
            v)  printf '%s\n' "Version: ${GLOB_VERSION}" && exit 0      ;;
            h)  show_help && exit 0     ;;
            z)  BOOL_QUIET="1"  ;;
            q)  TEMP_QUALITY="${OPTARG}"        ;;
            d)
                GLOB_TMP_DIR="${OPTARG}"
                [ -d "${GLOB_TMP_DIR}" ] || die 1 "Directory \"${GLOB_TMP_DIR}\" doesn't exist"
                ;;
            u)  GLOB_USER_AGENT="${OPTARG:-"${GLOB_USER_AGENT}"}"       ;;
            r)  GLOB_CUST_REFERER="${OPTARG:-"${GLOB_CUST_REFERER}"}"   ;;
            o)  TEMP_OUTPUT_FILE="${OPTARG}"    ;;
            c)  TEMP_CONNECTIONS="${OPTARG}"    ;;
            -)
                case "${OPTARG}" in
                    header)
                        GLOB_HEADER+="--${OPTARG} "
                        ;;
                    user-agent)
                        [ -z "${OPTARG}" ] || GLOB_USER_AGENT="${OPTARG##user-agent=}"
                        ;;
                    referer)
                        [ -z "${OPTARG}" ] || GLOB_CUST_REFERER="${OPTARG##referer=}"
                        ;;
                    *)
                        err "[--${OPTARG}]: Illegal Option"
                        show_help
                        exit 1
                        ;;
                esac
                ;;
            \?)
                err "[-${OPTARG}]: is not valid Argument"
                show_help
                exit 1
                ;;
            :)
                err "[-${OPTARG}]: Argument must have a Value"
                show_help
                exit 1
                ;;
        esac
    done
    shift "$((OPTIND - 1))"
    [ -z "${TEMP_OUTPUT_FILE}" ] && die 1 "Output file must be specified"
    [ -z "${GLOB_CUST_REFERER}" ] && GLOB_CUST_REFERER="${*}"
    TEMP_SPEC_URL="${*}"
    [ -z "${TEMP_SPEC_URL}" ] && die 1 "URL must be specified"
}

dep_check sed grep curl ffmpeg aria2c openssl
arg_parser "${@}"

# FFmpeg Logs and Temps
GLOB_FFMP_TEMP="${GLOB_TMP_DIR}/${GLOB_PARENT_PID}.piece"
GLOB_FFMP_PURL="${GLOB_TMP_DIR}/${GLOB_PARENT_PID}.pieceurl"
GLOB_FFMP_TS="${GLOB_TMP_DIR}/${GLOB_PARENT_PID}.tmpvid.ts"

# Creating DIRs for Temps
[ -d "${GLOB_TMP_DIR}" ] || { mkdir "${GLOB_TMP_DIR}" ; chmod 0700 "${GLOB_TMP_DIR}" ;}
[ -d "${GLOB_FFMP_TEMP}" ] || { mkdir "${GLOB_FFMP_TEMP}" ; chmod 0700 "${GLOB_FFMP_TEMP}" ;}

ffmpegdler "${TEMP_SPEC_URL}" "${TEMP_OUTPUT_FILE}" "${TEMP_QUALITY}" "${TEMP_CONNECTIONS:-8}"
GLOB_EXIT_CODE="$?"
if [ "${GLOB_EXIT_CODE}" -gt 0 ]; then
    die "${GLOB_EXIT_CODE}" "\rFailed to download stream due to errors"
else
    [ "${BOOL_QUIET}" = "1" ] || suc "\rDownload Success!"
fi
